
# calc_Calc_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftEXPLOGrightUMINUSNUMBER NAME PLUS MINUS EXP TIMES DIVIDE EQUALS LPAREN RPAREN LOG COMMAstatement : NAME EQUALS expressionstatement : expression\n        expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EXP expression\n        expression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : LOG LPAREN expression COMMA expression RPAREN'
    
_lr_action_items = {'RPAREN':([3,8,9,16,18,19,20,21,22,24,27,28,],[-10,-8,-11,24,-6,-3,-4,-7,-5,-9,28,-12,]),'EQUALS':([7,],[17,]),'PLUS':([2,3,7,8,9,16,18,19,20,21,22,23,24,25,27,28,],[11,-10,-11,-8,-11,11,-6,-3,-4,-7,-5,11,-9,11,11,-12,]),'NUMBER':([0,1,6,10,11,12,13,14,15,17,26,],[3,3,3,3,3,3,3,3,3,3,3,]),'COMMA':([3,8,9,18,19,20,21,22,23,24,28,],[-10,-8,-11,-6,-3,-4,-7,-5,26,-9,-12,]),'$end':([2,3,4,7,8,9,18,19,20,21,22,24,25,28,],[-2,-10,0,-11,-8,-11,-6,-3,-4,-7,-5,-9,-1,-12,]),'DIVIDE':([2,3,7,8,9,16,18,19,20,21,22,23,24,25,27,28,],[10,-10,-11,-8,-11,10,-6,10,10,-7,-5,10,-9,10,10,-12,]),'LOG':([0,1,6,10,11,12,13,14,15,17,26,],[5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,1,5,6,10,11,12,13,14,15,17,26,],[6,6,15,6,6,6,6,6,6,6,6,6,]),'MINUS':([0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,],[1,1,12,-10,1,-11,-8,-11,1,1,1,1,1,1,12,1,-6,-3,-4,-7,-5,12,-9,12,1,12,-12,]),'EXP':([2,3,7,8,9,16,18,19,20,21,22,23,24,25,27,28,],[13,-10,-11,-8,-11,13,13,13,13,-7,13,13,-9,13,13,-12,]),'NAME':([0,1,6,10,11,12,13,14,15,17,26,],[7,9,9,9,9,9,9,9,9,9,9,]),'TIMES':([2,3,7,8,9,16,18,19,20,21,22,23,24,25,27,28,],[14,-10,-11,-8,-11,14,-6,14,14,-7,-5,14,-9,14,14,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[4,]),'expression':([0,1,6,10,11,12,13,14,15,17,26,],[2,8,16,18,19,20,21,22,23,25,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.py',95),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',99),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',104),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',105),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',106),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',107),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','calc.py',108),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',123),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',127),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',131),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',135),
  ('expression -> LOG LPAREN expression COMMA expression RPAREN','expression',6,'p_expression_log','calc.py',143),
]
